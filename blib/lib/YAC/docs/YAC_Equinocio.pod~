=head1 NOME

YAC (YACCMS (Yet Another Catalyst CMS))

B<Colofon:>

YAC lembra "Yeast Artificial Chromosome. Yeah!
A levedura é o nosso mascote.
See L<http://en.wikipedia.org/wiki/Yeast>

=head1 VERSÃO

Versão 0.01

=head1 AUTOR

Monsenhor, C<< <ricardo.filipo at gmail.com> >>

=head1 SYNOPSIS

Um CMS matador. Tão simples! Tão útil!

    use YACCMS;

    my $web = new YACCMS;
    $web->run();
    # go to web!

=head2 Design Pattern

O ponto de vista do usuário leigo é o foco do YAC. Eu não tenho dúvida que seria muito mais fácil para o nosso pequeno YAC se não tivesse que lidar com usuários. Especialmente os que são leigos nas aventuras da TI. Mas nada disto teria sentido se o YAC não fosse pensado para ser usado por alguém.

Na verdade se houver alguma complexidade no YAC estará relacionada com o desenvolvimento de interfaces e agentes voltados à facilidade do usuário. O nosso objetivo é permitir que o usuário pense e trabalhe em seus assuntos, sem ter que se preocupar com detalhes de como isto se realiza. Infelizmente o YAC ainda não pode entender o usuário por telepatia, sim, seria certamente a melhor abordagem caso já existisse a tecnologia, então nos contentaremos com as interfaces em uso, como Html e Ajax.

Produtos como Drupal, líder do mercado, apresentam, apesar de sua grande maleabilidade e integrabilidade com outros sistemas, uma interface engessada e ainda complexa para um usuário médio. A proposta do YAC é ser o mais simples possível, o mais básico possível. O objetivo do YAC é administrar apenas cada elemento unitário de cada vez. A unidade é o Stack.

Em nossa opinião o melhor desenho para um CMS deve ser a Pilha. Mas pensamos a pilha como uma colagem, os objetos não precisam ser todos da mesma forma material ou tamanho. A estrutura de camadas do B<css> ou folhas de estilo funciona assim. Cada objeto depositado na pilha (a tela do site) é um url definido como um elemento do YAC, uma pilha de pilhas.

O nosso mascote, o fungo, apresenta uma estrutura muito parecida. Uma colônia de fungos forma desenhos, cores e formas de acordo com o ambiente. Cada pequeno fungo acha seu lugar e a pilha de fungos forma como que um indivíduo único, um local de vida, um site.

=head2 Stack

  ----------
  | Stack  |----->  URL                           # Tela do site
  ----------
      |       ----------
      |---->  | Stack  |----->  URL               # Cabeçalho
      |       ----------
      |          |       ----------
      |          |---->  | Stack  |----->  URL    # Logomarca
      |          |       ----------
      |          |       ----------
      |          |---->  | Stack  |----->  URL    # Menu
      |                  ----------
      |       ----------
      |---->  | Stack  |----->  URL               # Texto em html
              ----------


Um Stack está relacionado a uma URL, retorna um array de Stacks e pode ser herdado e livremente modificado.

Cada Stack pode ser apresentado, editado ou construido (hack). Além disso um Stac possui um usuário responsável.

=head1 MÉTODOS

=head2 new

Retorna uma instância do controlador do aplicativo.
Agora voê pode rodar ou parar o YAC.

=head2 run

Roda o daemon http na porta $port. Default em 80.

    my $port = 80 ;
    $web->run ($port) ;

=head2 stop

    $web->stop();

Para o daemon.

=head1 YAC

=head2 Imnplementação em Catalyst

YAC - Baseado em Catalyst

=head1 SYNOPSIS

    script/yac_server.pl

=head1 DESCRIÇÃO

=head2 Estrutura de Controle

O YAC pode carregar uma das 4 máquinas:

    . Play
    . Edit
    . Admin
    . Hack

Cada máquina exige que o usuário possua determinados função e direitos de acesso.

Para complementar estas máquinas existem os controladores Ws e Plugin.

=over 4

=item * Máquina Play

A Máquina Play ou controlador Root será sempre a I<default>. Aqui o usuário poderá visualizar os conteúdos em mídia e acessar os menus básicos para navegação.

=item * Máquina Edit

A logged user with editorial rigths can access the Edit machine and change their work.

Edit machine presents the media content to edit.
The default editor is pure text.
Other media editor like html, widgets, code, image, animation, xml, svg, json and so on can be added by plugin hooks.

The menu is same as Play machine plus personal menus and editor menus. The adicional interface will be the personal data editor and menus editor. This new editors will be integrated in the same interface.


=item * Admin machine

If the user is logged with admin rigths he can access the Admin machine.

Admin machine presents interfaces for edit and administer users, their data and work. Brings CMS's administration tasks like startup and shutdown the server or enable/disable some plugins.

The menu is same as Edit machine plus users and admin menus.

=item * Hack machine

With hacker rigths the user can access the Hack machine.

Hack machine presents interfaces to plugins, Catalyst hooks and some core helpers. Permit CMS's design and building tasks like create widgets, features or develop a new plugin.

The menu is same as Edit machine plus users and admin menus.

=back

=head2 Model Structure

=over 4

=item * Stack

The content handler. The only must in YAC.

One can create cool stacks!!

The core implemented stacks are: Content, Control and Widget.


=over 4


=item Control

A menu manager

=item Content

Handles html content.

=item Widget

Handles js code content.


=back


=item * Auth

The authentication class handle users, rules and rights.

=item * User

The user handler.

=item * Layout

The Layout objects are viewer Catalyst templates at database storage.

=item * Plugin

Plugins are Catalyst Plugins handlers.

=back

=head2 Core Plugins

=over 4

=item *

Media Player

=item *

Image slide and carroussel

=item *

Dialogs and some jqueryUI things

=item *

fkceditor

=item *

jsLinb visual editor

=back


=head1 SEE ALSO

L<YAC::Controller::Root>, L<YAC::Controller::Edit>,  L<YAC::Controller::Admin>,  L<YAC::Controller::Hack>,  L<YAC::Controller::Plugin>,  L<YAC::Controller::WS>, L<Catalyst>


=head1 ACKNOWLEDGEMENTS

=head2 Benefits to the Perl Community

A CMS (Content Management System) can be a web tool used in some internet business to help and administer media publication. As a market lider let's consider B<Drupal>, a php based CMS, reference product used by everywere, a key tool in Obama's USA president campaign. The B<Drupal>'s grow in users (designers and coders) and contributed addons bring up to community a lot of php programmer's work and all market demmand for their code.

The media produced by CMS needs to integrate with other system like CRMs and ERPs or other enterprise legacy. The CMS's oportunity to programmers became from integration tools like a plugin system and addon facilities. It's the B<Drupal>'s case. That minimalistic simplicity is the strongest value. Programmers can hook systems in the CMS and final users can plug in at the website instantly.

The secret: The designer (or anybody) can do functional web without the coder. A CMS needs a simple and clear user interface. But the core integration to other systems where the coder works need to be simple too. Final result: Productivity.

In the Java, Python, Ruby or Asp world we will find similar tools like Typo, OpenCms, Django and Plone. Some simple, others powefull.

At perl tools we consider MovableType. Our work will not compete directly with MovableType as it integrates in Catalyst's control level as our implementation and plugin basis. The YAC's paradigma differ in our simplicity and minimalistic goal. Will be ok to one begin in YAC and integrates MovableType anytime.

The Catalyst Project need a extensible, basic CMS Design Pattern with the eyes in the final user and the hooks that a programmer can play. A CMS more simple than B<Drupal> and with the power of B<CPAN> and B<Catalyst>.

We will consider cpan tools like Reaction, Mojo and Dancer.

=head3 Biblio

L<http://en.wikipedia.org/wiki/Content_management_system>
L<http://en.wikipedia.org/wiki/List_of_content_management_systems>
L<http://www.movabletype.org>
L<http://search.cpan.org/~okko/Catalyst-Controller-MovableType-0.003/>
L<http://en.wikipedia.org/wiki/OpenCms>
L<http://en.wikipedia.org/wiki/Drupal>
L<http://en.wikipedia.org/wiki/Plone_(software)>
L<http://en.wikipedia.org/wiki/Typo_(software)>
L<http://search.cpan.org/dist/Reaction/>
L<http://search.cpan.org/dist/Mojolicious/>
L<http://search.cpan.org/dist/Dancer/>

=head2 Deliverables

* A so basic CMS Design Pattern on Catalyst with some helpers, tools and simple layout.

* Ajax user interface to some Catalyst core functions.

* CPAN module as the first implementation.


=head2 Project Details

YAC will be a basic CMS Design Pattern with a simple user interface.
No need to learn perl to play the YAC but a monger will play so well.

A CMS needs, at least, to create, edit and publish content and to link that content as web address (urls) to navigation or command menus and links. A good addon is a theme manager. The access to the CMS and this features need to be defined at Access Control List.
The stronguest feature in the UI will be a simple plugin system integrated at cpan level.

The idea, as the first implementation, will be an extensible and basic ajax structure around jquery from Catalyst. Consider Catalyst::View::Component::jQuery.

As simple as an CMS can be, YAC will implement a simple user interface around Catalyst helpers, open hooks and plugins. This open design will encourage YAC's contributions grow.

The most important pattern to be done will be an open user interface paradigma.  The idea about web interfaces can't neglect Ajax and the HTML 5 protocol.

=head3 Features

=over 2

=item *

Media Player

=item *

Image slide and carroussel

=item *

Dialogs and some jqueryUI things

=item *

Access Control List Auth

=item *

HTML WYSIWYG content editor

=item *

Acces to Catalyst and Plugins hooks at WYSIWYG content editor level

=item *

Image, media and file upload at WYSIWYG content editor level

=item *

Virtual file manager at WYSIWYG content editor level

=item *

Plugin System, Catalyst compatible

=item *

Hooks to some Catalyst helpers: create View, create Model, create Control


=back





=head1 LICENSE AND COPYRIGHT

Copyright 2010 Monsenhor.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.
